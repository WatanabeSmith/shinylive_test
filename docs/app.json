[{"name":"app.R","content":"\r\nlibrary(shiny)\r\nlibrary(MASS)\r\nlibrary(tidyverse)\r\nlibrary(rhandsontable)\r\nlibrary(bslib)\r\n\r\nlibrary(conflicted)\r\n\r\nconflict_prefer(\"select\", \"dplyr\")\r\nconflict_prefer(\"filter\", \"dplyr\")\r\n\r\n\r\nvia_vec <- c(100, 90, 75, 50, 36, 28, 27)\r\ndose_vec <- seq(7,1)\r\n\r\nt <- \"Venetoclax\"\r\n\r\nstarting_drugdata <- data.frame(via = via_vec,\r\n                 dose_point = dose_vec) %>% \r\n    mutate(drug_conc_uM = 10/(3^(dose_vec-1))) %>% \r\n    mutate(via_pct = via/100) %>% \r\n    select(-via, -dose_point)\r\n\r\nget_ic50 <- function(df){\r\n    if(nrow(df) < 3){return(NA_real_)}\r\n    raw_ic50 <- df %>% glm(via_pct ~ log10(drug_conc_uM),\r\n                           family = binomial(link = \"probit\"),\r\n                           data = .) %>% \r\n        dose.p(., p = 0.5) %>% \r\n        as.numeric() %>% \r\n        10^.\r\n    ic50 <- pmin(raw_ic50, max(df$drug_conc_uM)) %>% \r\n        pmax(., min(df$drug_conc_uM))\r\n    if(min(df$via_pct) > 0.5){\r\n        return(max(df$drug_conc_uM))\r\n    } else\r\n        if(max(df$via_pct) < 0.5){\r\n            return(min(df$drug_conc_uM))\r\n        } else {\r\n            return(ic50)\r\n        }\r\n    \r\n}\r\n\r\nget_auc <- function(df){\r\n    if(nrow(df) < 3){return(NA_real_)}\r\n    \r\n    dfmodel <- df %>% \r\n        glm(via_pct ~ drug_conc_uM,\r\n            family = binomial(link = \"probit\"),\r\n            data = .)\r\n    \r\n    integrate(f = function(x) { pnorm(q=(dfmodel$coefficients %>% .[[1]] + \r\n                                             x*dfmodel$coefficients %>% .[[2]]),\r\n                                      lower.tail = TRUE)*100},\r\n              # lower = 0.1, upper = 1) %>% .$value\r\n              lower = min(dfmodel$data$drug_conc_uM %>% log10()), \r\n              upper = max(dfmodel$data$drug_conc_uM %>% log10())) %>% \r\n        .$value\r\n    \r\n}\r\n\r\nget_max_auc <- function(df){\r\n    if(nrow(df) < 3){return(NA_real_)}\r\n    \r\n    dfmodel <- df %>% \r\n        glm(via_pct ~ drug_conc_uM,\r\n            family = binomial(link = \"probit\"),\r\n            data = .)\r\n    \r\n    integrate(f = function(x) {punif(q=(1+x*0), \r\n                                     lower.tail = TRUE)*100},\r\n              lower = min(dfmodel$data$drug_conc_uM %>% log10()),\r\n              upper = max(dfmodel$data$drug_conc_uM %>% log10()))$value\r\n}\r\n\r\nui <- page_sidebar(\r\n    title = \"Probit drug curve calculator\",\r\n    \r\n    sidebar = sidebar(\r\n        rHandsontableOutput(outputId = \"raw_drugdata\"),\r\n        width = 325\r\n    ),\r\n    verbatimTextOutput(outputId = \"ic50\"),\r\n    verbatimTextOutput(outputId = \"auc\"),\r\n    verbatimTextOutput(outputId = \"pct_auc\"),\r\n    plotOutput(outputId = \"probit_plot\")\r\n\r\n    \r\n)\r\n\r\nserver <- function(input, output) {\r\n\r\n\r\n    \r\n    output$raw_drugdata <- renderRHandsontable({\r\n        rhandsontable(starting_drugdata,\r\n                            height = 300, width = 300) %>% \r\n            hot_col(\"drug_conc_uM\", format = \"0.0000\") %>% \r\n            hot_col(\"via_pct\", format = \"0.000\") %>% \r\n            hot_context_menu(allowRowEdit = TRUE, \r\n                             allowColEdit = FALSE)\r\n    })\r\n    \r\n    drug_data <- reactive({\r\n        hot_to_r(input$raw_drugdata)\r\n    })\r\n    \r\n    ic50 <- reactive({\r\n            get_ic50(hot_to_r(input$raw_drugdata))\r\n    })\r\n    \r\n    auc <- reactive({\r\n        get_auc(hot_to_r(input$raw_drugdata))\r\n    })\r\n    \r\n    pct_auc <- reactive({\r\n        auc() / (\r\n            get_max_auc(hot_to_r(input$raw_drugdata))\r\n        )\r\n    })\r\n    \r\n    p_plot <- reactive({\r\n        drug_data() %>%\r\n            ggplot(aes(x = drug_conc_uM, y = via_pct)) +\r\n            geom_smooth(method = \"glm\",\r\n                        method.args =\r\n                            list(family = \"binomial\"(link = \"probit\")),\r\n                        se = FALSE,\r\n                        color = \"black\",\r\n                        size = 0.2) +\r\n            geom_point(size = 3,\r\n                       color = \"black\") +\r\n            # geom_point(aes(x = ic50, y = 0.5), #Can enable to see IC50 point\r\n            #            color= \"red\") +\r\n            scale_x_log10() +\r\n        labs(x = paste0(t, \" [uM]\"),\r\n             y = \"Normalized Viability\",\r\n             title = paste0(t),\r\n             subtitle = paste0(\"AUC= \", round(auc(),1), \r\n                               \" -- %AUC= \", round(pct_auc(), 3)*100, \"%\",\r\n                               \" -- IC50= \", round(ic50(),2), \"uM\")) +\r\n            theme_classic() +\r\n            coord_cartesian(ylim = c(0,1)) +\r\n            theme(plot.title.position = \"plot\")\r\n    })\r\n    \r\n    output$probit_plot <- renderPlot({\r\n        p_plot()\r\n    })\r\n    \r\n    \r\n}\r\n\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"},{"name":"AUC_sandboxing.R","content":"library(tidyverse)\r\nlibrary(MASS)\r\nlibrary(conflicted)\r\nconflict_prefer(\"select\", \"dplyr\")\r\nconflict_prefer(\"filter\", \"dplyr\")\r\n\r\n\r\nvia_vec <- c(100, 90, 75, 50, 36, 28, 27)\r\ndose_vec <- seq(7,1)\r\n\r\ndf <- data.frame(via = via_vec,\r\n                 dose_point = dose_vec) %>% \r\n  mutate(drug_conc_uM = 10/(3^(dose_vec-1))) %>% \r\n  mutate(via_pct = via/100)\r\n\r\nt <- \"drug_name\"\r\n\r\nget_ic50 <- function(df){\r\n  if(nrow(df) < 3){return(NA_real_)}\r\n  raw_ic50 <- df %>% glm(via_pct ~ log10(drug_conc_uM),\r\n                         family = binomial(link = \"probit\"),\r\n                         data = .) %>% \r\n    dose.p(., p = 0.5) %>% \r\n    as.numeric() %>% \r\n    10^.\r\n  ic50 <- pmin(raw_ic50, max(df$drug_conc_uM)) %>% \r\n    pmax(., min(df$drug_conc_uM))\r\n  if(min(df$via_pct) > 0.5){\r\n    return(max(df$drug_conc_uM))\r\n  } else\r\n    if(max(df$via_pct) < 0.5){\r\n      return(min(df$drug_conc_uM))\r\n    } else {\r\n      return(ic50)\r\n    }\r\n  \r\n}\r\n\r\nget_auc <- function(df){\r\n  if(nrow(df) < 3){return(NA_real_)}\r\n  \r\n  dfmodel <- df %>% \r\n    glm(via_pct ~ drug_conc_uM,\r\n        family = binomial(link = \"probit\"),\r\n        data = .)\r\n  \r\n  integrate(f = function(x) { pnorm(q=(dfmodel$coefficients %>% .[[1]] + \r\n                                         x*dfmodel$coefficients %>% .[[2]]),\r\n                                    lower.tail = TRUE)*100},\r\n            # lower = 0.1, upper = 1) %>% .$value\r\n            lower = min(dfmodel$data$drug_conc_uM %>% log10()), \r\n            upper = max(dfmodel$data$drug_conc_uM %>% log10())) %>% \r\n    .$value\r\n  \r\n}\r\n\r\nget_max_auc <- function(df){\r\n  if(nrow(df) < 3){return(NA_real_)}\r\n  \r\n  dfmodel <- df %>% \r\n    glm(via_pct ~ drug_conc_uM,\r\n        family = binomial(link = \"probit\"),\r\n        data = .)\r\n  \r\n  integrate(f = function(x) {punif(q=(1+x*0), \r\n                                   lower.tail = TRUE)*100},\r\n            lower = min(dfmodel$data$drug_conc_uM %>% log10()),\r\n            upper = max(dfmodel$data$drug_conc_uM %>% log10()))$value\r\n}\r\n\r\nauc <- get_auc(df)\r\npct_auc <- auc / get_max_auc(df)\r\nic50 <- get_ic50(df)\r\n\r\ndf %>% \r\n  ggplot(aes(x = drug_conc_uM, y = via_pct)) +\r\n  geom_smooth(method = \"glm\", \r\n              method.args = \r\n                list(family = \"binomial\"(link = \"probit\")),\r\n              se = FALSE,\r\n              color = \"black\",\r\n              size = 0.2) +\r\n  geom_point(size = 3,\r\n             color = \"black\") +\r\n  # geom_point(aes(x = ic50, y = 0.5), #Can enable to see IC50 point\r\n  #            color= \"red\") +\r\n  scale_x_log10() +\r\n  labs(x = paste0(t, \" [uM]\"),\r\n       y = \"Normalized Viability\",\r\n       title = paste0(t),\r\n       subtitle = paste0(\"AUC= \", round(auc,1), \" -- IC50= \", round(ic50,2), \"uM\")) +\r\n       # subtitle = paste0(\"AUC= \", round(auc,1), \" -- IC50= \", round(ic50,2))\r\n  theme_classic() +\r\n  coord_cartesian(ylim = c(0,1)) +\r\n  theme(plot.title.position = \"plot\")\r\n\r\n\r\n","type":"text"},{"name":"base_shiny_format_app.R","content":"\r\nlibrary(shiny)\r\nlibrary(MASS)\r\nlibrary(tidyverse)\r\nlibrary(rhandsontable)\r\n\r\n\r\nlibrary(conflicted)\r\n\r\nconflict_prefer(\"select\", \"dplyr\")\r\nconflict_prefer(\"filter\", \"dplyr\")\r\n\r\n\r\nvia_vec <- c(100, 90, 75, 50, 36, 28, 27)\r\ndose_vec <- seq(7,1)\r\n\r\nstarting_drugdata <- data.frame(via = via_vec,\r\n                 dose_point = dose_vec) %>% \r\n    mutate(drug_conc_uM = 10/(3^(dose_vec-1))) %>% \r\n    mutate(via_pct = via/100) %>% \r\n    select(-via, -dose_point)\r\n\r\nui <- fluidPage(\r\n    titlePanel(\"Probit drug curve calculator\"),\r\n    sidebarPanel(\r\n        rHandsontableOutput(outputId = \"raw_drugdata\")\r\n    ),\r\n    mainPanel(\r\n        plotOutput(outputId = \"probit_plot\")\r\n    )\r\n\r\n    \r\n)\r\n\r\nserver <- function(input, output) {\r\n\r\n\r\n    \r\n    output$raw_drugdata <- renderRHandsontable({\r\n        rhandsontable(starting_drugdata,\r\n                            height = 300) %>% \r\n            hot_col(\"drug_conc_uM\", format = \"0.0000\") %>% \r\n            hot_col(\"via_pct\", format = \"0.000\") %>% \r\n            hot_context_menu(allowRowEdit = TRUE, \r\n                             allowColEdit = FALSE)\r\n    })\r\n    \r\n    drug_data <- reactive({\r\n        hot_to_r(input$raw_drugdata)\r\n    })\r\n    \r\n    # observe({\r\n    #     print(hot_to_r(input$raw_drugdata))\r\n    # })\r\n    \r\n    output$probit_plot <- renderPlot({\r\n        drug_data() %>% \r\n            ggplot(aes(x = drug_conc_uM, y = via_pct)) +\r\n            geom_smooth(method = \"glm\", \r\n                        method.args = \r\n                            list(family = \"binomial\"(link = \"probit\")),\r\n                        se = FALSE,\r\n                        color = \"black\",\r\n                        size = 0.2) +\r\n            geom_point(size = 3,\r\n                       color = \"black\") +\r\n            # geom_point(aes(x = ic50, y = 0.5), #Can enable to see IC50 point\r\n            #            color= \"red\") +\r\n            scale_x_log10() \r\n        # labs(x = paste0(t, \" [uM]\"),\r\n        #      y = \"Normalized Viability\",\r\n        #      title = paste0(t),\r\n        #      subtitle = paste0(\"AUC= \", round(auc,1), \" -- IC50= \", round(ic50,2), \"uM\")) +\r\n        # # subtitle = paste0(\"AUC= \", round(auc,1), \" -- IC50= \", round(ic50,2))\r\n        # theme_classic() +\r\n        # coord_cartesian(ylim = c(0,1)) +\r\n        # theme(plot.title.position = \"plot\")\r\n    })\r\n    \r\n    \r\n}\r\n\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"},{"name":"basic_shiny_app.R","content":"library(shiny)\r\nlibrary(tidyverse)\r\n\r\nui <- fluidPage(\r\n  textInput(inputId = \"textbox\",\r\n            label = \"Write something here\",\r\n            value = \"placeholder text\"),\r\n  \r\n  verbatimTextOutput(\"showtext\"),\r\n  \r\n  checkboxGroupInput(inputId = \"cyl_choice\",\r\n                     label = \"Filter by number of cyliners\",\r\n                     choices = c(4,6,8),\r\n                     selected = c(4,6,8),\r\n                     inline = TRUE),\r\n  flowLayout(\r\n    plotOutput(\"carsplot\"),\r\n    plotOutput(\"filteredcarsplot\")\r\n  )\r\n)\r\n\r\nserver <- function(input, output, session) {\r\n  output$showtext <- renderPrint(input$textbox)\r\n\r\n  output$carsplot <- renderPlot(\r\n    mtcars %>% \r\n      ggplot(aes(x = hp, y = mpg)) +\r\n      geom_point() +\r\n      labs(title = input$textbox))\r\n  \r\n  ### This will error out because the new dataframe needs to be a reactive object\r\n  # \r\n  # modified_df <- mtcars %>% \r\n  #   filter(cyl %in% input$cyl_choice)\r\n  # \r\n  # output$filteredcarsplot <- renderPlot(\r\n  #   modified_df %>% \r\n  #     ggplot(aes(x = hp, y = mpg)) +\r\n  #     geom_point() +\r\n  #     labs(title = input$textbox))\r\n  \r\n  modified_df <- reactive({\r\n    mtcars %>% \r\n    filter(cyl %in% input$cyl_choice)\r\n  })\r\n  \r\n  output$filteredcarsplot <- renderPlot(\r\n    modified_df() %>% \r\n      ggplot(aes(x = hp, y = mpg)) +\r\n      geom_point() +\r\n      labs(title = input$textbox))\r\n}\r\n\r\nshinyApp(ui, server)\r\n","type":"text"},{"name":"shinyapp.Rproj","content":"Version: 1.0\r\n\r\nRestoreWorkspace: Default\r\nSaveWorkspace: Default\r\nAlwaysSaveHistory: Default\r\n\r\nEnableCodeIndexing: Yes\r\nUseSpacesForTab: Yes\r\nNumSpacesForTab: 2\r\nEncoding: UTF-8\r\n\r\nRnwWeave: Sweave\r\nLaTeX: pdfLaTeX\r\n","type":"text"}]
